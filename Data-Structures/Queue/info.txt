****** Queue ******

* Contents:
    1. What is a Queue?
    2. Terminology
    3. Where is queue used?
    4. Complexity
    5. Implementation in Breadth First Search
====================================
*** What is a Queue? ***

1. A queue is a linear data structure which models 
   real world queues by having two primary operations, 
   namely "enqueue" and "dequeue".

===================================
*** Terminology ***

    1. Dequeue - Removing elements for start.
    2. Enqueue - Inserting elements at the end.
    
    There no consistency in terminologies for inserting 
    and removing elements from queues.
    
    Enqueue = Adding = Offering

    Dequeue = Polling (These are also called removing, But 
    this can cause ambiguity that do they want to remove from 
    back or from or from the entire queue).
===================================
*** Where is queue used? ***

    - Any waiting line models a queue
    - Can be used to effectively keep track of the x(anything) 
      most recently added elements.
    - Web server request managment where you want first come first serve 
    - Breadth First Serach (BFS) graph traversal
===================================
*** Complexity ***

    Operations |  Complexity
    ======================== 
    Enqueue    |    O(1)
    Dequeue    |    O(1)
    Peeking    |    O(1)
    Contains   |    O(n)
    Removal    |    O(n)    
    Is Empty   |    O(1)
===================================
*** Implementation in Breadth First Search ***

Algorithm:
    Let Q be a Queue
    Q.enqueue(starting_node)
    starting_node = true

    While Q is not empty Do
        node = Q.dequeue()
        For neighbour in neighbours(node):
            If neighbour has not been visited:
                neighbour.visited = true
                Q.enqueue(neighbour2)
